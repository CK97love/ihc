Overview Use Cases:
  Mobile:
    - Patients sign in on tablets
    - Member adds data for that patient as they go through clinic (?)
    - IHC Member sends new updates to Express API
    - IHC Member syncs and downloads updates from Express API

  Web:
    - Member signs in to gain authentication
    - Member views table of all patients
    - Member can select patient and view all their checkins

==========================================
Database design:
ihc-database.firebaseio.com/
  groups/
    :groupid/
      timestamps/
        List of auto generated timestamp keys pointing to the times "Upload
        updates" was clicked
        [{
          timestampKey: number 
        }, ...]
      updates/
        timestamp/
          :timestampKey/
            List of auto generated update keys, don't care about value
            [{
              updateKey: true
            }, ...]
      updates/
        :updateKey/
          Object of update, contains all data entered for a patient
          {
            user: string (userKey)
            date: number (yyyymmdd)
            weight: string
            height: string
            blood pressure: string
            current meds: string
            symptoms: string
            notes: string
          }
      users/
        :userKey/
          Unique user info (Is it guaranteed unique?)
          {
            data: string (birthday (yyyymmdd) + && + firstname + &&  + lastname)
          }
      user/
        :userKey/
          List of updateKeys for that user
          [{
            updateKey: true
          }]

==========================================
Mobile:
React Native

TODO
- Register device with backend, passing some local id (?)
  - May not care about this because private app  
- "Upload Updates" button
- "Sync" button
  -Locally store updates with AsyncStorage
- Disable "Sync" if updates exist (?)
- Include form for signing in and going through clinic
- Request permission to store info
  - Legal disclaimer type thing necessary?

"Upload Updates" PATCH /groups/:group/all -> Express API:
Send list of local updates
Locally save list of timestamps when "Upload Updates" was clicked
Body:
  {
    timestamp: When "Upload Updates" button is clicked,
    user_updates: list of user updates
        [{ <Match user object in database design section> }]
  }

"Sync" GET /groups/:group/all/:timestamp?exclude=[timestamps] -> Express API:
Pass in 
  :timestamp of when last synced
  [timestamps] 
    - Timestamps when "Upload Updates" was clicked to exclude from results to
      avoid duplicates

Retrieve list of all updates since given timestamp (last synced)
  - Go through list and locally save updates
  - Clear local list of "Upload Updates" timestamps

==========================================
Web Frontend:
React, Firebase Hosting
Talks directly to Firebase Database (without going through Express API)
  Allows us to ignore CORS complications

TODO
- Password protected (authentication)
- View all info on searchable table
- Click on patient and view data
- Form to manually add new information

==========================================
Server API;
Express, Firebase Cloud Functions

TODO
- Fix to align with new database design
- Nonessential API endpoints (?)

Routes:
  ESSENTIAL:
  GET   /groups/:group/all/:timestamp   => Return information for updates after
                                           last_synced_timestamp
    1. Grab list of send_update_timestamps from groups/:groupid
    2. For each send_update_timestamp that is later than the last_synced_timestamp
      ("Last synced" is property of the tablet)
      - Ignore timestamps passed in to exclude param 
      - Get list of updates from groups/:timestamp and consolidate into one list

  PATCH /groups/:group/all   => Update information for all people
    - Body contains 
    {
      timestamp: send_update_timestamps,
      user_updates: list of user updates
    }

  NONESSENTIAL:
  GET   /groups/:group/:id   => Return information for that person
  POST  /groups/:group      => Add information for new person
  PATCH /groups/:group/:id   => Update information for person

==========================================
Commandline:

Local:
`npm run build` from IHC/web/public/client to build React
`npm run devserver` from IHC/web to run firebase cloud functions

Pipeline:
`git push`
`npm run build` from IHC/web/react
`firebase deploy` from IHC/web
