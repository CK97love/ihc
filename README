Overview Use Cases:
SOAP and Triage new forms every visit
Medication and growth chart forms reused

Very high level plan:
Central laptop runs local server over a local network (through router)
- Laptop can be held at relay station to monitor?
- Tablets call API endpoints for local server
  - Store all data received locally in case of router problems
    - Figure out how to update new data efficiently!!!
    - Have a sync button that syncs up all tablets

  Mobile:
    - Patients sign in on tablets
    - Stations add data for that patient as they go through clinic
    - Must include Spanish

  Laptop:
    - Primary need: run local server
    - Other use cases:
      - View table of all patients and go through data

Local server API:
TODO

==========================================
Mobile:
React Native

TODO
- "Sync" button
  - Locally store updates with AsyncStorage
  - Disable "Sync" if updates exist

PLAN OUT LOCAL STORAGE PLAN

-- Begin N/A --
"Upload Updates" PATCH /groups/:group/all -> Express API:
Send list of local updates
Locally save list of timestamps when "Upload Updates" was clicked
Body:
  {
    timestamp: When "Upload Updates" button is clicked,
    user_updates: list of user updates
        [{ <Match user object in database design section> }]
  }

"Sync" GET /groups/:group/all/:timestamp?exclude=[timestamps] -> Express API:
Pass in 
  :timestamp of when last synced
  [timestamps] 
    - Timestamps when "Upload Updates" was clicked to exclude from results to
      avoid duplicates

Retrieve list of all updates since given timestamp (last synced)
  - Go through list and locally save updates
  - Clear local list of "Upload Updates" timestamps

-- End N/A --


==========================================
Laptop:
React and Express local server

TODO
- Form to manually add new information (?)

-- Begin N/A --
Routes:
  ESSENTIAL:
  GET   /groups/:group/all/:timestamp   => Return information for updates after
                                           last_synced_timestamp
    1. Grab list of send_update_timestamps from groups/:groupid
    2. For each send_update_timestamp that is later than the last_synced_timestamp
      ("Last synced" is property of the tablet)
      - Ignore timestamps passed in to exclude param 
      - Get list of updates from groups/:timestamp and consolidate into one list

  PATCH /groups/:group/all   => Update information for all people
    - Body contains 
    {
      timestamp: send_update_timestamps,
      user_updates: list of user updates
    }

  NONESSENTIAL:
  GET   /groups/:group/:id   => Return information for that person
  POST  /groups/:group      => Add information for new person
  PATCH /groups/:group/:id   => Update information for person

-- End N/A --

==========================================
Database design:

REDO WITH LOCAL MONGODB

-- Begin N/A --
ihc-database.firebaseio.com/
  groups/
    :groupid/
      timestamps/
        List of auto generated timestamp keys pointing to the times "Upload
        updates" was clicked
        [{
          timestampKey: number 
        }, ...]
      updates/
        timestamp/
          :timestampKey/
            List of auto generated update keys, don't care about value
            [{
              updateKey: true
            }, ...]
      updates/
        :updateKey/
          Object of update, contains all data entered for a patient
          {
            user: string (userKey)
            date: number (yyyymmdd)
            weight: string
            height: string
            blood pressure: string
            current meds: string
            symptoms: string
            notes: string
          }
      users/
        :userKey/
          Unique user info (Is it guaranteed unique?)
          {
            data: string (birthday (yyyymmdd) + && + firstname + &&  + lastname)
            lastupdated: number
          }
      user/
        :userKey/
          List of updateKeys for that user
          [{
            updateKey: true
          }]

-- End N/A --

==========================================
Commandline:

Local:
`npm run build` from IHC/web/public/client to build React
`npm run devserver` from IHC/web to run firebase cloud functions

Pipeline:
`git push`
`npm run build` from IHC/web/react
`firebase deploy` from IHC/web

`npm start` from IHC/mobile/ihc
Start emulator/plug in physical device
