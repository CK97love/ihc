// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly for default (existing patient) 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#F5FCFF",
      "flex": 1,
    }
  }
>
  <RCTScrollView
    contentContainerStyle={
      Object {
        "alignItems": "center",
        "flex": 0,
        "justifyContent": "center",
        "padding": 20,
      }
    }
  >
    <View>
      <Text
        style={
          Object {
            "fontSize": 20,
            "margin": 10,
            "textAlign": "center",
          }
        }
      >
        Signin
      </Text>
      <View
        style={
          Object {
            "width": "80%",
          }
        }
      >
        <View
          style={Object {}}
        >
          <View
            style={
              Object {
                "marginBottom": 10,
              }
            }
          >
            <Text
              style={
                Object {
                  "color": "#000000",
                  "fontSize": 17,
                  "fontWeight": "500",
                  "marginBottom": 7,
                }
              }
            >
              First name
            </Text>
            <View
              style={Object {}}
            >
              <TextInput
                accessibilityLabel="First name"
                allowFontScaling={true}
                onChangeText={[Function]}
                style={
                  Object {
                    "borderColor": "#cccccc",
                    "borderRadius": 4,
                    "borderWidth": 1,
                    "color": "#000000",
                    "fontSize": 17,
                    "height": 36,
                    "marginBottom": 5,
                    "paddingHorizontal": 7,
                    "paddingVertical": 7,
                  }
                }
                underlineColorAndroid="transparent"
                value=""
              />
            </View>
          </View>
          <View
            style={
              Object {
                "marginBottom": 10,
              }
            }
          >
            <Text
              style={
                Object {
                  "color": "#000000",
                  "fontSize": 17,
                  "fontWeight": "500",
                  "marginBottom": 7,
                }
              }
            >
              Father's last name
            </Text>
            <View
              style={Object {}}
            >
              <TextInput
                accessibilityLabel="Father's last name"
                allowFontScaling={true}
                onChangeText={[Function]}
                style={
                  Object {
                    "borderColor": "#cccccc",
                    "borderRadius": 4,
                    "borderWidth": 1,
                    "color": "#000000",
                    "fontSize": 17,
                    "height": 36,
                    "marginBottom": 5,
                    "paddingHorizontal": 7,
                    "paddingVertical": 7,
                  }
                }
                underlineColorAndroid="transparent"
                value=""
              />
            </View>
          </View>
          <View
            style={
              Object {
                "marginBottom": 10,
              }
            }
          >
            <Text
              style={
                Object {
                  "color": "#000000",
                  "fontSize": 17,
                  "fontWeight": "500",
                  "marginBottom": 7,
                }
              }
            >
              Mother's last name
            </Text>
            <View
              style={Object {}}
            >
              <TextInput
                accessibilityLabel="Mother's last name"
                allowFontScaling={true}
                onChangeText={[Function]}
                style={
                  Object {
                    "borderColor": "#cccccc",
                    "borderRadius": 4,
                    "borderWidth": 1,
                    "color": "#000000",
                    "fontSize": 17,
                    "height": 36,
                    "marginBottom": 5,
                    "paddingHorizontal": 7,
                    "paddingVertical": 7,
                  }
                }
                underlineColorAndroid="transparent"
                value=""
              />
            </View>
          </View>
          <View
            style={
              Object {
                "marginBottom": 10,
              }
            }
          >
            <Text
              style={
                Object {
                  "color": "#000000",
                  "fontSize": 17,
                  "fontWeight": "500",
                  "marginBottom": 7,
                }
              }
            >
              Birthday
            </Text>
            <View>
              <View
                accessible={true}
                isTVSelectable={true}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "opacity": 1,
                  }
                }
              >
                <Text
                  style={
                    Object {
                      "color": "#000000",
                      "fontSize": 17,
                      "marginBottom": 5,
                      "padding": 7,
                    }
                  }
                >
                  Tap here to select a date
                </Text>
              </View>
              <View
                style={
                  Object {
                    "height": 0,
                    "overflow": "hidden",
                  }
                }
              >
                <View
                  style={
                    Array [
                      Object {
                        "marginBottom": 4,
                      },
                      Object {
                        "height": 0,
                      },
                    ]
                  }
                >
                  <RCTDatePicker
                    date={30000}
                    mode="date"
                    onChange={[Function]}
                    onResponderTerminationRequest={[Function]}
                    onStartShouldSetResponder={[Function]}
                    style={
                      Object {
                        "height": 216,
                      }
                    }
                  />
                </View>
              </View>
            </View>
          </View>
          <View
            style={
              Object {
                "marginBottom": 10,
              }
            }
          >
            <Text
              style={
                Object {
                  "color": "#000000",
                  "fontSize": 17,
                  "fontWeight": "500",
                  "marginBottom": 7,
                }
              }
            >
              New patient?
            </Text>
            <RCTSwitch
              accessibilityLabel="New patient?"
              disabled={false}
              onChange={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              onValueChange={[Function]}
              style={
                Array [
                  Object {
                    "height": 31,
                    "width": 51,
                  },
                  Object {
                    "marginBottom": 4,
                  },
                ]
              }
              value={false}
            />
          </View>
        </View>
        <View
          accessible={true}
          isTVSelectable={true}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#2196F3",
              "borderRadius": 2,
              "elevation": 4,
              "height": 40,
              "justifyContent": "center",
              "margin": 4,
              "opacity": 1,
              "padding": 8,
              "width": "100%",
            }
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#fefefe",
                  "fontWeight": "500",
                  "textAlign": "center",
                },
                undefined,
              ]
            }
          >
            Submit
          </Text>
        </View>
      </View>
    </View>
  </RCTScrollView>
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#F5FCFF",
        "justifyContent": "center",
      }
    }
  >
    <Text
      style={
        Object {
          "color": "red",
          "textAlign": "center",
        }
      }
    />
    <Text
      style={
        Object {
          "color": "green",
          "textAlign": "center",
        }
      }
    />
  </View>
</View>
`;

exports[`renders correctly for new patient 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Provider
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
  >
    <Connect(SigninScreen) />
  </Provider>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {},
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {},
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getSnapshotBeforeUpdate": true,
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`renders correctly for new patient 2`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Provider
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
  >
    <Connect(SigninScreen) />
  </Provider>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {},
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {},
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getSnapshotBeforeUpdate": true,
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
